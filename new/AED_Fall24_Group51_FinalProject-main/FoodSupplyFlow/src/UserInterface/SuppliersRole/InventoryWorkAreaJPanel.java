/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface.SuppliersRole;

import Business.Enterprise.Enterprise;
import Business.UserAccount.UserAccount;
import Business.WorkQueue.Inventory;
import Business.EcoSystem;
import Business.WorkQueue.InventoryDirectory;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
/**
 *
 * @author Abhinav
 */
public class InventoryWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form InventoryWorkAreaJPanel
     */
    private JPanel userProcessContainer;
    private ArrayList<Inventory> inventoryList;
    UserAccount userAccount;
    EcoSystem ecosystem;
    Enterprise enterprise;
       
    public InventoryWorkAreaJPanel(JPanel userProcessContainer,UserAccount userAccount,Enterprise enterprise) {
        initComponents();
        this.enterprise = enterprise;
        this.userProcessContainer = userProcessContainer;
        this.userAccount = userAccount;
        
        populateInventory();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblInventory = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        Filterbtn = new javax.swing.JButton();
        jComboBoxProductType = new javax.swing.JComboBox<>();
        lblProductTypeSummary = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        lblInventoryCount = new javax.swing.JLabel();
        lblLeastAvailableProduct = new javax.swing.JLabel();
        lblMostAvailableProduct = new javax.swing.JLabel();
        lblAverageQuantity = new javax.swing.JLabel();
        Backbtn1 = new javax.swing.JButton();

        setBackground(new java.awt.Color(0, 51, 102));

        tblInventory.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Product ID", "Product Type", "Product Name", "Availablility ", "Units"
            }
        ));
        jScrollPane1.setViewportView(tblInventory);

        jLabel1.setFont(new java.awt.Font("Verdana", 1, 36)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Inventory Dashboard");

        jLabel2.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Product Type ");

        Filterbtn.setText("Filter");
        Filterbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                FilterbtnActionPerformed(evt);
            }
        });

        jComboBoxProductType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        lblProductTypeSummary.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblProductTypeSummary.setForeground(new java.awt.Color(255, 255, 255));
        lblProductTypeSummary.setText("0");

        jLabel6.setFont(new java.awt.Font("Verdana", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("Total Inventory Count:");

        lblInventoryCount.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblInventoryCount.setForeground(new java.awt.Color(255, 255, 255));
        lblInventoryCount.setText("0");

        lblLeastAvailableProduct.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblLeastAvailableProduct.setForeground(new java.awt.Color(255, 255, 255));
        lblLeastAvailableProduct.setText("0");

        lblMostAvailableProduct.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblMostAvailableProduct.setForeground(new java.awt.Color(255, 255, 255));
        lblMostAvailableProduct.setText("0");

        lblAverageQuantity.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        lblAverageQuantity.setForeground(new java.awt.Color(255, 255, 255));
        lblAverageQuantity.setText("0");

        Backbtn1.setFont(new java.awt.Font("Verdana", 1, 14)); // NOI18N
        Backbtn1.setText("Back");
        Backbtn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                Backbtn1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addGap(25, 25, 25)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 1187, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(jLabel2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jComboBoxProductType, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(37, 37, 37)
                                    .addComponent(Filterbtn, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(120, 120, 120)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel6)
                                    .addGap(39, 39, 39)
                                    .addComponent(lblInventoryCount, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addComponent(lblProductTypeSummary, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(lblLeastAvailableProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 501, Short.MAX_VALUE)
                                .addComponent(lblMostAvailableProduct, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(lblAverageQuantity, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(30, 30, 30)
                        .addComponent(Backbtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(46, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(Backbtn1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jComboBoxProductType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(Filterbtn))
                .addGap(27, 27, 27)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblInventoryCount))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblLeastAvailableProduct)
                        .addGap(40, 40, 40)
                        .addComponent(lblMostAvailableProduct)
                        .addGap(51, 51, 51)
                        .addComponent(lblAverageQuantity))
                    .addComponent(lblProductTypeSummary, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addGap(47, 47, 47))
        );
    }// </editor-fold>//GEN-END:initComponents

    
    private void populateInventory() {
        // Retrieve inventory from InventoryDirectory
        ArrayList<Inventory> inventoryList = InventoryDirectory.getInventoryList();
        
        DefaultTableModel model1 = (DefaultTableModel) tblInventory.getModel();
        model1.setRowCount(0);  // Clear existing rows in the table
        
        // Add data to the table from inventoryList
        for (Inventory p : inventoryList) {
            Object[] row = new Object[5];
            row[0] = p.getProductID();
            row[1] = p.getProductType();
            row[2] = p.getProductName();
            row[3] = p.getAvailability();
            row[4] = p.getQuantity();
            model1.addRow(row);
        }

           
    // Populate ComboBox for Product Type
    Set<String> productTypes = new HashSet<String>();
    for (Inventory item : inventoryList) {
        productTypes.add(item.getProductType());
    }
    jComboBoxProductType.removeAllItems();
    for (String type : productTypes) {
        jComboBoxProductType.addItem(type);
    }

    
    int counter = 0;
        for (Inventory i : inventoryList) {

            counter = counter + i.getQuantity();

        }

        lblInventoryCount.setText(Integer.toString(counter));
        
    // Calculate and set total inventory quantity using traditional for loop
    int totalInventory = 0;
    for (Inventory item : inventoryList) {
        totalInventory += item.getQuantity();
    }
    lblProductTypeSummary.setText(Integer.toString(totalInventory));
        
    int totalQuantityPerType = 0; // For average or total calculation
    Map<String, Integer> productTypeQuantities = new HashMap<>();
    String mostAvailableProduct = "";
    int maxQuantity = Integer.MIN_VALUE;
    String leastAvailableProduct = "";
    int minQuantity = Integer.MAX_VALUE;
    
    for (Inventory item : inventoryList) {
        totalInventory += item.getQuantity();

        // Calculate total quantity for each product type
        String productType = item.getProductType();
        productTypeQuantities.put(productType, productTypeQuantities.getOrDefault(productType, 0) + item.getQuantity());
    
        // Find the most available product
        if (item.getQuantity() > maxQuantity) {
            maxQuantity = item.getQuantity();
            mostAvailableProduct = item.getProductName();
        }
        // Find the least available product
        if (item.getQuantity() < minQuantity) {
            minQuantity = item.getQuantity();
            leastAvailableProduct = item.getProductName();
        }
        }
        lblMostAvailableProduct.setText("Most Available Product: " + mostAvailableProduct + " (" + maxQuantity + ")");
        lblLeastAvailableProduct.setText("Least Available Product: " + leastAvailableProduct + " (" + minQuantity + ")");
        int averageQuantity = totalInventory / inventoryList.size();
        lblAverageQuantity.setText("Average Quantity: " + averageQuantity);
        StringBuilder productTypeSummary = new StringBuilder("<html>");
        productTypeSummary.append("<b>Product Type wise Summary:</b><br><br>");
        for (Map.Entry<String, Integer> entry : productTypeQuantities.entrySet()) {
            productTypeSummary.append("<b>").append(entry.getKey()).append(":</b> ")
                    .append(entry.getValue()).append(" items<br>");
        }
        productTypeSummary.append("</html>");

        // Set the formatted text to the label
        lblProductTypeSummary.setText(productTypeSummary.toString());
        
     }    
    
    
    
    private void FilterbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_FilterbtnActionPerformed
        // TODO add your handling code here:
        ArrayList<Inventory> inv = new ArrayList<>();

        for (Inventory f : InventoryDirectory.getInventoryList()) {

            if (f.getProductType().equalsIgnoreCase((String) this.jComboBoxProductType.getSelectedItem())) {
                inv.add(f);
            }
        }
        if (inv.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Empty List");
        }

        DefaultTableModel dtm = (DefaultTableModel) tblInventory.getModel();
        dtm.setRowCount(0);

        for (Inventory p : inv) {
            Object row[] = new Object[5];
            row[0] = p;
            row[1] = p.getProductType();
            row[2] = p.getProductName();
            row[3] = p.getAvailability();
            row[4] = p.getQuantity();

            dtm.addRow(row);

        }
    }//GEN-LAST:event_FilterbtnActionPerformed

    private void Backbtn1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_Backbtn1ActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        Component[] componentArray = userProcessContainer.getComponents();
        Component component = componentArray[componentArray.length - 1];
        SuppliersWorkAreaJPanel dwjp = (SuppliersWorkAreaJPanel) component;
        dwjp.populateTable();
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_Backbtn1ActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Backbtn1;
    private javax.swing.JButton Filterbtn;
    private javax.swing.JComboBox<String> jComboBoxProductType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAverageQuantity;
    private javax.swing.JLabel lblInventoryCount;
    private javax.swing.JLabel lblLeastAvailableProduct;
    private javax.swing.JLabel lblMostAvailableProduct;
    private javax.swing.JLabel lblProductTypeSummary;
    private javax.swing.JTable tblInventory;
    // End of variables declaration//GEN-END:variables
}
